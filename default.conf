worker_processes  2;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    lua_package_path "/usr/local/openresty/http-lib/?.lua;;";
    lua_shared_dict dogs 1m;
    init_by_lua_block {
        local dogs = ngx.shared.dogs;
        dogs:set("head", "url-0")
        dogs:set("url-0", 0)
    }
    server {
        listen 8081;
        resolver 10.42.0.4;
        location / {
            if ($request_method = GET ) {
                set $target "";
                set $url "";
                rewrite_by_lua_block {
                    hostnum = string.sub(ngx.var.request_uri, 8)
                    hostnum = string.reverse(hostnum)
                    if hostnum ~= '' then 
                        num = tonumber(hostnum) 
                        if ( num ~= nil and num >= 0 and num == math.floor(num) and num ~= math.huge and num ~= nan ) then
                            former = string.sub(ngx.var.request_uri, 2, 7)
                            ngx.var.url = former
                            result = "url-"
                            ngx.var.target = result .. tostring(num)
                        else
                            ngx.status = ngx.HTTP_NOT_FOUND
                            ngx.exit(ngx.status)
                        end
                    end
                }
                proxy_pass http://$target/&url;
            }
            if ($request_method = POST ) {
                set $target1 "";
                rewrite_by_lua_block {
                    local dogs = ngx.shared.dogs
                    ngx.var.target1 = (tostring(dogs:get("head")))
                    oldvalue=tonumber(dogs:get(tostring(ngx.var.target1)))+1
                    if(ngx.var.target1 == "url-0" and oldvalue == 1)
                    {
                        local http = require "resty.http"
                        local httpc = http.new()
                        r, code =httpc:request_uri("http://10.42.2.183:9090/scaleUp?index=0", {
                        method = "GET",
                        })
                    }
                    dogs:set(tostring(ngx.var.target1), oldvalue)
                    if ( oldvalue >= 500000 ) then
                        local num = tonumber(string.sub(tostring(ngx.var.target1),5))
                        num = num + 1
                        local http = require "resty.http"
                        local httpc = http.new()
                        r, code =httpc:request_uri("http://10.42.2.183:9090/scaleUp?index="+tostring(num), {
                            method = "GET",
                        })
                        dogs:set("head", "url-"+tostring(num))
                        ngx.var.target1 = (tostring(dogs:get("head")))
                        dogs:set(tostring(ngx.var.target1), 0)
                    end
                }
                proxy_pass http://$target1;
                body_filter_by_lua_block {
                    local body = ngx.arg[1]
                    local headpoint = string.reverse(string.sub(tostring(ngx.var.target1),5))
                    body = body .. headpoint
                    ngx.arg[1] = body
                }
            }

        }
    }
}
